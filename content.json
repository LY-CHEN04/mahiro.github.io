{"meta":{"title":"OYAMAMahiro","subtitle":"","description":"2024-08-22","author":"CLY","url":"https://ly-chen04.github.io","root":"/"},"pages":[],"posts":[{"title":"Intel QSV在FFmpeg中的实现与使用~","slug":"Intel-QSV在FFmpeg中的实现与使用","date":"2024-08-22T12:10:47.000Z","updated":"2024-08-22T12:10:47.714Z","comments":true,"path":"2024/08/22/Intel-QSV在FFmpeg中的实现与使用/","permalink":"https://ly-chen04.github.io/2024/08/22/Intel-QSV%E5%9C%A8FFmpeg%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E4%BD%BF%E7%94%A8/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"CS2","slug":"CS2","date":"2024-08-22T12:09:44.000Z","updated":"2024-08-22T12:09:44.794Z","comments":true,"path":"2024/08/22/CS2/","permalink":"https://ly-chen04.github.io/2024/08/22/CS2/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"CSGO控制台指令简明索引","slug":"CSGO控制台指令简明索引","date":"2024-06-16T04:05:07.616Z","updated":"2024-08-22T09:08:05.133Z","comments":true,"path":"2024/06/16/CSGO控制台指令简明索引/","permalink":"https://ly-chen04.github.io/2024/06/16/CSGO%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%8C%87%E4%BB%A4%E7%AE%80%E6%98%8E%E7%B4%A2%E5%BC%95/","excerpt":"注：CSGO指令不完全适用于CS2控制台。","text":"注：CSGO指令不完全适用于CS2控制台。 CSGO控制台指令简明索引V社(Valve)的Source起源引擎制作的游戏都可以开发者控制台，简称控制台console，使用控制台可以实现很多游戏的设置面板无法提供的功能，比如跳投、切换准星参数、颜色等等特殊功能都是利用了控制台的指令实现的，这也是CS游戏的一大特色了。 开启控制台在游戏的设置菜单里，游戏设置-游戏-启用开发者控制台选是即可启用控制台，之后按下~即可开关控制台并使用各种指令。开启控制台的指令是con_enable 1，看起来是个悖论，等到说CFG时就知道它的用处了。 多个控制台指令当同时需要在控制台使用多个指令时，务必使用分号;分隔各个指令。 控制台提示指令输入的过程中控制台会给出提示，大多数情况都会有下拉菜单提示各种指令，可以使用↑↓在下拉菜单中切换，使用Tab键也可以自动填入下拉菜单的第一个指令，比如： 显示各种网络参数的指令net_graph 1，输入至net_时下方第一条指令就是net_graph，直接按下Tab和1即可快速输入这条完整的指令。 退出游戏的指令quit，原理同上，输入q→Tab→回车，即可实现光速quit（真实）。 不要小看提示，他可以很大程度上纠正拼写问题，有时使用指令&#x2F;CFG的时候可以试着手动输一遍，过程中提示消失很可能是拼写有误；同样，如果使用HLAE录制集锦，输入mirv发现没有提示极可能没有正确地使用HLAE启动CSGO。 常用控制台指令账号登录相关 quit 快速退出游戏，使用心态爆炸，光速quit exit 同上，不过没有那么有名 disconnect 退出服务器到主界面 retry 重连最近一次加入的房间，比如从休闲、死斗退出之后还想回到刚才的房间可以使用，前提是中途没有重开游戏；5e、b5等平台也可以使用快速重连服务器（小退），重启游戏是大退。 常用指令 net_graph 1 显示网络参数：ping&#x2F;var&#x2F;choke等，0为关闭。 net_graphpos 1 网络参数的水平位置：1&#x3D;右 2&#x3D;中 3&#x3D;左。 fps_max 300 设置最大帧数为300，一般会根据当前的帧数表现动态调整，尽可能让FPS波动不超过60以获得较好的观感体验。 volume 1 主音量大小，0为静音 sensitivity 0.9 鼠标灵敏度 map dust2 进入本地离线服务器并加载dust2地图，地图名不必完全一致，如荒漠迷城可以用map mir。 mat_monitorgamma 2.2 亮度，越小越亮[1.6~2.6] mat_monitorgamma_tv_enabled “0” 显示模式[1.电视 0.电脑屏幕] buy awp 购买武器指令，即购买awp give weapon_ak47 获得ak47，常用于跑图 +right 视角右移，输入-right取消 +moveright 相当于按下D键，-moveright取消，和+right组成挂机防踢指令 cl_相关参数cl_开头的指令往往和HUD有关，比如雷达、血条、菜单等用于提示玩家的信息。 cl_autowepswitch 0 关闭自动换上捡起的武器：珍爱生命，远离自动换枪 cl_autohelp 0 禁用游戏提示（格洛克&#x2F;法玛斯连发提示） cl_showhelp 0 禁用游戏提示 cl_dm_buyrandomweapons 0 关闭死斗随机买枪，功能同F3键 cl_draw_hud 0 关闭HUD，得到相对干净的画面，方便截图或者录制视频 cl_draw_only_deathnotices 0 关闭大部分HUD，保留准星和击杀信息，常用于录制视频和集锦 cl_drawhud_force_radar -1 强制关闭雷达，但是雷达下方的金钱数无法关闭，1开启雷达 HUD颜色透明度、雷达参数省略，直接在设置中调整即可。 准星参数 cl_crosshairalpha 255 透明度（0~255） cl_crosshairdot 1 准星中间的点，0关闭 cl_crosshairgap 1 十字准星间距，可以&lt;0 cl_crosshair_t 0 T型准星，1开启 cl_crosshairsize 3 准星长度 cl_crosshairthickness 1 准星厚度 cl_crosshairstyle 4 准星类型[1. 2. 3. 4.经典静态 5.跑动静止开枪动态] cl_crosshair_drawoutline 0 准星黑色外轮廓粗细，0关闭 cl_crosshaircolor_b “250” cl_crosshaircolor_r “0” cl_crosshaircolor_g “255” 准星的颜色RGB值 主要是这些参数，小改动使用控制台方便，更全面的调整请在创意工坊Crashz crosshair generator中调整。 持枪视角参数 viewmodel_presetpos 2 持枪视角预设[1.默认 2.写实 3.经典] viewmodel_recoil 0 取消开枪枪口向上跳动，1开启时跳动幅度很大 viewmodel_offset_x “1.1” viewmodel_offset_y “-1.8” viewmodel_offset_z “0.2” XYZ轴的参数 viewmodel_fov “54” 视角的FOV（视野大小） cl_bobcycle “0.98” 手臂摆动幅度 主要浏览一下这些参数，可以在创意工坊Crashz viewmodel generator中调整。 sv_相关参数sv是server的简写，一般在主机创建房间的时候使用，跑图常用。 sv_cheats 1 开启作弊模式，有的指令官匹会影响平衡，跑图时记得开启 sv_infinite_ammo 1 无限子弹 [1.无限子弹 2.无限弹夹数 0.关闭] sv_showimpacts 1 显示弹着点，0关闭 sv_showimpacts_time 15 弹着点时间，单位秒 sv_grenade_trajectory 1 显示投掷物轨迹，0关闭 sv_grenade_trajectory_time 15 投掷物轨迹显示时间 sv_grenade_trajectory_thickness 0.5 轨迹线厚度 bot相关指令 bot_kick 踢掉BOT bot_stop 1 BOT静止 bot_crouch 1 BOT蹲下 bot_add 添加BOT bot_kill 杀死BOT bot_place 放置BOT mp_相关指令 mp_warmup_end 热身结束 mp_restartgame 1 重新开始游戏 mp_freezetime 1 回合开始静止1s mp_round_restart_delay 2 回合结束后等待时间2s god 无敌，gods是所有人无敌 bind指令1bind x &quot;...&quot;; 该指令的格式如上，x为绑定的按键名，...是绑定的指令，可以是一条也可以是多条指令用分号;分开，填入引号&quot; &quot;，当指令是没有间隔的单独指令时引号;可以省略，其他情况不可省，如+speed可省略，sensitivity 1&#96;和多个指令不省略。多个指令例子如下： 1bind shift &quot;+speed;r_cleardecals&quot;; +speed是静步的指令，r_cleardecals是清楚血迹的指令，绑定了shift键。这条指令执行之后，在按下shift键静步的同时清除血迹。 bind指令还有一种用法，用来查看某个按键已经绑定的指令： 1bind x 输入之后控制台会显示已经绑定的指令，可以检查有没有正确地绑定按键。 unbind指令清除已绑定的键位，比如已经绑定了x键，想要取消： 1unbind x 1unbindall //取消所有按键绑定 1unbindallmousekeyboard//取消所有键鼠的绑定 bindtoggle和toggle指令有的指令比如cl_drawhud 1即打开HUD，修改数字得到cl_drawhud 0，即关闭HUD。实际这种指令往往在两个不同的值之间切换，那么使用bindtoggle和toggle就可以写出非常简单的一键切换的指令： 1bindtoggle x cl_drawhud; 1bind x &quot;toggle cl_drawhud&quot;; 这两种写法都可以实现x键切换HUD开关。 但是后者toggle的应用更广，可以触发切换更多的指令，比如： 1bind x &quot;toggle volume&quot;; 可以写成： 1bind x &quot;toggle volume 0 1&quot;; 但是实际上音量不仅有0、1两种情况，可以是0&#x2F;1之间的小数，同样有的指令的值可以大于1，这时候用第二种写法就可以任意地切换。 1bind x &quot;toggle volume 1 0.5&quot;; //一键切换音量100%/50% alias指令bind指令可以给某个键绑定指令，而alias指令则可以自定义指令。有了alias之后，可以实现CSGO中很多特殊的功能，可以了解一下一键高亮击杀的指令解释。 1alias func &quot;...;...&quot;; 执行这条指令之后，在关闭CSGO游戏之前，使用func指令就相当于执行””中所有的指令，可以直接在控制台中使用： 1func 也可以绑定到某个按键上，按键触发： 1bind x func; 一定注意alias指令是临时生效的，重启游戏就要重新输入，解决办法是写成CFG并启用自动加载。 alias指令强大之处在于，它可以嵌套定义： 12345textalias f f_on;alias f_on &quot;alias f f_off;...&quot;;alias f_off &quot;alias f f_on;...&quot;;bind x f; 这样就实现一个开关式的功能： 一开始，按键x代表执行f，即f_on。 按下按键x，实际执行f_on，由于也执行了alias f f_of;，之后执行f相当于执行f_off 再按下按键x，实际执行f_off，由于也执行了alias f f_on;，之后执行f相当于执行f_on 往复在两个档位间切换 ...处可以放入各种指令，已经可以实现很多的功能了，下面给出跳投的指令： 123bind Capslock +jumpthrow; // &quot;Capslock&quot;键跳投 可修改alias +jumpthrow &quot;+jump;-attack&quot;;alias -jumpthrow -jump; 如果理解了刚才说的内容，这段指令应该可以理解，这里补充的是：+指令、-指令代表按下&#x2F;松开按键时触发，按下Capslock键执行+jump;-attack，也就是跳投，松开Capslock键执行-jump，防止不停地跳。 链接CSGO指令搜索 Valve官方指令清单 默认键位指令","categories":[],"tags":[]},{"title":"CS2 Page","slug":"CS2 Page","date":"2024-06-16T04:05:07.614Z","updated":"2024-08-22T09:07:55.219Z","comments":true,"path":"2024/06/16/CS2 Page/","permalink":"https://ly-chen04.github.io/2024/06/16/CS2%20Page/","excerpt":"此页面正在维护。","text":"此页面正在维护。","categories":[],"tags":[]},{"title":"更新日志","slug":"更新日志","date":"2024-06-16T04:05:07.611Z","updated":"2024-09-03T09:38:01.821Z","comments":true,"path":"2024/06/16/更新日志/","permalink":"https://ly-chen04.github.io/2024/06/16/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/","excerpt":"站点数据更新日志统一记录页","text":"站点数据更新日志统一记录页 2024年9月3日 网站页面重建 使用阿里云CDN加速服务 2月13日 删除了 大学英语语法总结 和 CSGO音乐盒原曲 网站CDN加速服务更换至阿里云服务 站点主体维护 更改了一些细节 2023年6月9日 更新日志 新增文章 CSGO音乐盒原曲 加入嵌入式第三方组件 3A415界面切块游戏回归 微调界面文字与布局 5月19日 更新日志 网站界面重构 网站接入CDN加速服务 优化网站整体体验 5月6日 更新日志 3A415页面临时改为Major 2023倒计时界面 (单击页面中的图片可跳转至主办方官网) 5月4日 更新日志 3A415界面更新彩蛋 (界面重写) 优化部分浏览体验 5月1日 更新日志 更改部分页面的背景图 在OBS——推流录制工具一文中插入若干图片 在全局底栏和文章页正文标题中加入渐变文字效果 4月28日 更新日志 新增文章：OBS-推流录制工具 更新文章：CSGO控制台指令简明索引 更改了部分文章的banner图片 4月27日 更新日志 新增文章：大学英语语法总结 更改主页图片 优化导航栏模糊效果 4月3日 更新日志 新增页面：3A415 简化顶部导航栏项目 4月2日更新日志 站点底部新增外部链接 新增全局中国标准时间校准 新增文章：更新日志 关于页面新增外部链接和图片 3月29日 更新日志 站点底部加入访问统计数据 新增文章：CSGO控制台指令简明索引 添加文章在首页展示的简略描述信息 新增文章页的数据统计 新增文章页的更新通知 3月27日 更新日志 新建 关于 页面 更改关于页面中的相关信息 新增站点顶栏毛玻璃模糊效果 3月24日 更新日志 更改站点全局主题 更改站点全局字体为系统UI字体 加入文章字数和浏览量统计 加入文章发布时间和作者署名 3月23日 更新日志 新建站点ChenHNSY.Gitee.io 更改站点标题为OYAMAMahiro 更改站点的归属权为OYAMAMahiro 更改站点首页文字 调快首页文字的出场速度","categories":[],"tags":[]},{"title":"OBS_推流录制工具","slug":"OBS-推流录制工具","date":"2024-06-16T04:05:07.608Z","updated":"2024-08-22T09:08:25.906Z","comments":true,"path":"2024/06/16/OBS-推流录制工具/","permalink":"https://ly-chen04.github.io/2024/06/16/OBS-%E6%8E%A8%E6%B5%81%E5%BD%95%E5%88%B6%E5%B7%A5%E5%85%B7/","excerpt":"基于OBS 28.0 的基础面板解释。","text":"基于OBS 28.0 的基础面板解释。 OBS——推流录制工具OBS (Open Broadcaster Software) 是一款开源、免费、跨平台的直播推流和视频录制工具，它功能强大、可调空间大、上限很高，但是因为它主要为直播而设计，录制操作的便利性较差，上手有一定难度。和一众录屏工具（包括N&#x2F;A卡驱动自带录屏）和它的套皮软件相比，OBS 属于那种 “愿意花一些时间研究能带来更高画质和效率” 的工具。 本文将会基于 28.0 版本介绍直播推流和录制相关的设置，并以CSGO素材录制为例介绍游戏场景下的设置策略和一些 Trick，注意 OBS 实际分为 Studio 和 Classic 两个版本，Classic 版本有更好的兼容性，对较老的系统和设备有些用处，一般都用 Studio 版本。 安装官网：https://obsproject.com 项目：https://github.com/obsproject/obs-studio 论坛：https://obsproject.com/forum 资源：https://obsproject.com/forum/resources 资源页包含各种插件、脚本、主题和工具。 OBS Studio 已经登录 Steam 商店，同样免费。如果担心下载和更新的速度，可以直接从 Steam 下载，相对更加方便。 初识OBS启动 OBS，忽略首次引导，主界面如图所示。可以看到界面分为以下几个部分： 顶部菜单栏 预览窗口 快捷工具栏 来源 混音器 场景 转场特效 控件 来源面板看到 来源 面板，我们需要添加合适的源得到想要的画面，这里的源类似 PhotoShop 里 图层 的概念，上层会覆盖下层，顺序可以随意调整，来源不可用时为透明，不会影响下一层。 可以添加的来源有很多种，首先添加一个 显示器采集 源，一切默认，这样我们就能预览看到画面了。 游戏源 和 窗口采集 可以专门捕获全屏游戏或某个游戏&#x2F;窗口，捕获游戏时的性能会更好，可以把它们放在显示器源的上层，兼顾性能和便利，也可以关闭显示器源，不暴露桌面情况只展示特定游戏或窗口。 应用程序音频捕获 是当前正在测试的功能，可以获取特定程序的声音，特别适合分离游戏&#x2F;语音音源，方便后期处理，后面会详细介绍。 混音器面板这里我们可以调整各个声音来源的音量和滤镜，改变它们的混合比例。打开某个音源的滤镜页，可以添加 降噪、阈值 等滤镜，包括电脑中已安装的VST效果，图中简单加了一个 噪音抑制，效果尚可。 点“齿轮”按钮或右键打开高级音频属性，这里可以进一步调整音量、左右平衡、偏移和监听，和较为重要的轨道。轨道中某个数字是否勾选代表它是否在该轨道中出现，一般会在轨道1中保留主要声音&#x2F;直播观众听到的声音，其他轨道分别设置麦克风、开黑语音等音源，方便后期处理。 场景面板设置和调整各个场景（Scene），直播往往需要多个不同场景，如正式开播前的等候场景、游戏A、B、C的场景、聊天场景等等。提前设置好各个场景可以避免来源面板臃肿和不断开关来源的麻烦。搭配相应的工具（如StreamDeck）可以实现快速切换场景，给直播带来便利。 场景之上还有一个场景集合的概念，在顶部菜单栏可以看到，可以更方便的分组、导入导出场景设置。 转场特效面板调整场景切换时的转场特效，默认只有渐变和裁切，即交叉溶解和硬切，通过安装转场插件可以添加更多效果。 预览窗口除了实时预览效果，在预览窗口还可以全屏投影、截屏和调整源的尺寸及位置。 配置文件类似刚才提到的场景集合，每一个配置文件对应一组接下来要介绍的设置，整个设置面板的内容都包括在内（录制、推流、快捷键等），注意它和场景互不干扰，要分别设置。 设置从控件面板点击按钮打开设置面板，这里按照录制设置的逻辑顺序介绍，以下每一小节对应左侧的标签栏名称。 视频在这里可以调整画布和输出的分辨率、缩小方法和录制帧率FPS。 两个分辨率一般保持一致，即你想要的录制&#x2F;推流分辨率，并且此时缩小方法不会生效。基础分辨率大于输出分辨率相当于超采，理论上画面细节会更好，性能消耗也会更高。不过这里调整缩放和来源设置的缩放有些重复，除非想要1080P推流同时4K录像，一般不要动，一致即可。 常用 FPS 值 不超过60，想要录制更高帧率可以改成 整数 FPS 值，最高能到120，再往上可以设置分数 FPS 值，如 180FPS -&gt; 180/1，不过此时录制的性能一般有瓶颈。 高级高级页一般要注意的是 视频、录像、串流延迟这三个部分。 色彩格式默认的NV12适合推流，设置成其他格式则会有格式转换的性能消耗，但如果机器的性能尚可，建议设置成 I420。如果追求更高的画质，I420下色彩信息损失较多，可以考虑修改为 I444，但它的兼容性较差，请务必确认你所使用的软件能够正确识别和播放。 想要进一步了解可以搜索 色度抽样 色彩范围设置为有限会丢弃掉一些超黑超白数据。直播场景建议保持 受限 以规避一些问题。在录制场景下可以设置为 完全，注意此时部分播放器可能会出现异常。 录像的文件名格式中包含年月日和时间，可以根据需要修改。 自动封装至MP4格式再录制文件格式为MKV时会自动在录制完成后转换格式，后文中展开说明。 回放缓存文件名前缀&#x2F;后缀 设置回放缓存（即时重放）功能保存的视频文件名，和录制得到的文件作区分，建议前缀或者后缀改成即时重放。 串流延迟顾名思义，主要用于游戏直播防窥屏等需求。 输出输出页包含推流、录像、音频和回放缓存（即时重放）的设置，也是OBS设置的难点。 输出模式建议设置成 高级 以获得最大的调整空间，简单模式 下的录像设置不是很够。如果你想要更简单一些，可以先看下去，如果你需要的选项在 简单模式 下就能调整好也可以不动。 编码器编码器是OBS设置的重点。其中 x264 是 CPU 软件编码，比较吃CPU的性能和多核性能，而显卡编码一般对性能影响较小，但是画质较差，NVIDIA显卡有 NVENC，AMD显卡有 AMF，Intel显卡有 QuickSync，Mac下也有对应的编码器。 显卡编码非常适合游戏场景，我们可以把推流和录像都设置成显卡编码或者一个CPU编码、一个显卡编码平衡负载。 x264 编码器一般关注这三个设置 码率控制：固定码率CBR&#x2F;可变码率VBR&#x2F;CRF VBR 更节省码率，但画面变换时码率变换可能滞后导致码率不够，出现明显模糊 CRF 模式适合录像，数值越低画质越高 比特率：CBR&#x2F;VBR下可用 直播建议在 4000Kbps 以上 8000Kbps 附近比较适合 1080P 直播 码率上限取决于网络的上行带宽，建议测试网速确保带宽足够 CPU使用预设：对CPU占用影响较大，掉帧时提高（使用更快）预设 NVIDIA NVENC H.264 编码器 可以尝试使用 NVIDIA NVENC HEVC，但要考虑到直播平台是否支持，和部分设备无法硬解时出现的卡顿情况。 速率控制：同上码率控制 最大比特率：可以在比特率的基础上加 2000~5000 Kbps 预设：直播时尽可能在带有性能的三个档位中选择，推荐 性能 录像：CQP 模式，数值 12~23；预设改为质量/最高质量 Apple ProRes 编码器安装 StreamFX插件后可用，录像时可以考虑尝试使用，适用于对画质要求高且配置、存储足够的用户，建议配置设置 422标准 或 422高品质 更多的编码知识和OBS编码器设置作业参见 iAvoe的文档 录像录像格式：即录像文件的封装格式，OBS 里的编码格式基本都支持 mp4&#x2F;mov&#x2F;mkv 封装，区别是 mkv 封装遇到断电等意外情况时可以保留之前录好的部分，菜单栏-文件-录像转封装 处转换为 mp4 格式后即可正常播放，但是部分播放器和软件（如旧版本Pr&#x2F;Ae）支持较差，可能会无法播放。有需要可以前往 高级页 设置自动转换封装。 音轨：如要分离音频方便后期处理，这里务必勾选上所有要用到的音轨。 编码器：如设置成 （使用推流编码器），则会把直播的画面直接保存到本地，但对录像来说画质可能不够好，只求记录时可以这样设置，追求画面则设置成其他编码器。 重新缩放输出：期望的推流和录像分辨率不一致时启用。 自动分割文件：录制时间较长时可以固定文件大小&#x2F;时长分割保存到硬盘中，降低意外情况下的风险，也方便筛选素材。 音频这里可以设置更高的比特率&#x2F;码率&#x2F;位率，提高声音质量，也可以给不同的轨道起名字方便后期区分。 回放缓存相当于N卡的即时重放，非常适合保存游戏的高光时刻。 最长回放时间：建议设置 90s 或 120s 强迫症玩家可以 +1s 不然实际时长会小 1s 最大内存：无法估计时尽可能给高，如 4096MB 或 8192MB 推流这里设置推流的服务器和秘钥，OBS默认并不支持国内的直播平台，把服务修改成 自定义...，从直播平台的开播页找到服务器地址和秘钥并复制到这里，注意不要泄露秘钥。 快捷键这里没有什么难点，注意开始推流&#x2F;停止推流设置同一个快捷键时，按键为开关式，一开一关。一般建议设置的快捷键： 开始推流 停止推流 开始录制 停止录制 开始回放缓存 停止回放缓存 保存回放（输出页启用回放缓存后才可见） CSGO素材录制画面捕获 想得到拉伸画面，对源右键-变换-拉伸到全屏 或者选中源 Ctrl+S 取消相应游戏源&#x2F;窗口捕获&#x2F;显示器捕获中的 显示鼠标指针 受CSGO受信任模式的影响，官方匹配&#x2F;直接启动游戏时无法捕获游戏流，只能捕获显示器，性能较差；平台游戏不受影响。 针对本地回放录像 demo 录屏有两种解决方法： 启动项添加 -allow_third_party_software 使用 HLAE启动 CSGO 声音捕获 在来源面板添加应用程序音频捕获，先启动一次游戏并设置好捕获的窗口 csgo.exe。 在高级音频属性中调整轨道分配，让游戏的音频单独一轨，设置-音轨-录像启用对应轨道。 录像设置CPU&#x2F;显卡编码根据个人偏好和电脑配置情况选择，以下给出推荐设置： x264 编码器 码率控制模式：强烈建议选择 CRF CRF 的数值越小，画质越高，文件越大，推荐范围 6~16 CRF 数值减 6，码率翻倍 CPU 使用预设 veryfast ~ ultrafast 选一个当前设置下不掉帧的档位，建议 ultrafast NVIDIA NVENC H.264&#x2F;HEVC 编码器 编码器：HEVC 比 H.264 效率更高，尤其是高分辨率 速率控制：由于没有 CRF 模式，这里选择 CQP 模式 CQ 级别： H.264：推荐 12，不超过 23 HEVC：推荐 16，不超过 26 预设：选 质量 或 最高质量 Apple ProRes 编码器配置选择 422 标准（APCN） 游戏设置 窗口模式 取消绑定 Ctrl，追踪投掷物从 Alt 改为 R，避免切屏和截图时出现异常 游戏中播放和暂停快捷键可与 OBS 开始&#x2F;结束录制保持一致 控制台指令 engine_no_focus_sleep 0 确保窗口失焦后不掉帧 慢放录像，如 1&#x2F;4：demo_timescale 0.25 或 Shift+F2 在 demoui 中手动操作 限制游戏渲染帧率，如 120fps：fps_max 120 帧率调整录制高帧率素材的时候我们一般会慢放录像+限制FPS节省资源给OBS留出更多的性能空间，在编码设置确定之后调整录制帧率可以明显提高录制的速度，可参照上文设置120FPS甚至更高的帧率。 菜单栏-停靠窗口-统计：启用统计面板，可以看到由于渲染延迟错过的帧和由于编码延迟跳过的帧和FPS。颜色变黄&#x2F;变红或丢帧较多时（偶尔）说明当前设置无法完美录像，需要调整编码器设置或降低录制FPS。","categories":[],"tags":[]},{"title":"Intel QSV在FFmpeg中的实现与使用","slug":"Intel QSV在FFmpeg中的实现与使用","date":"2024-06-16T04:05:07.600Z","updated":"2024-08-22T09:08:16.014Z","comments":true,"path":"2024/06/16/Intel QSV在FFmpeg中的实现与使用/","permalink":"https://ly-chen04.github.io/2024/06/16/Intel%20QSV%E5%9C%A8FFmpeg%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0%E4%B8%8E%E4%BD%BF%E7%94%A8/","excerpt":"文章摘自CSDN社区。本文经修改。","text":"文章摘自CSDN社区。本文经修改。 一、处理器整体架构英特尔的图形处理GPU被称为“核芯显卡”，与CPU集成封装在同一个芯片上，上图展示的是芯片的内部结构。 1.1 发展英特尔从lvy Bridge架构开始就尝试将GPU与CPU集成在中央处理芯片中并逐代发展到Skylake架构。初期的Ivy Bridge架构中GPU所占的面积非常小，而到现在的第五代处理器架构Skylake已经实现十分成熟的GPU集成技术，GPU在芯片中所占的面积已经超过了一半。在未来将推出基于PCI-E的独立显卡，为PC带来更大的图像性能提升。 1.2 基础功能模块上图展示的是一款GPU所具备的一些基础功能模块。英特尔的核芯显卡分为普通的Intel HD Graphics与性能强大的Intel Iris (Pro)Graphics，其中硬件结构的变化决定性能的高低。GPU中的Slice个数越多，处理单元的组织方式越多，性能便越强大。 Intel HD Graphics也就是GT2中只有一个Slice，而对于Iris系列中的GT3则有两个Slice；GT3e相对于GT3增加了eDRAM使其具有更快的内存访问速度，而GT4e则增加到三个Slice。 GPU的基础功能模块主要由EU以及相关的Media Processing（MFX）等组成。一个Slice中有三个Sub-Slice，Sub-Slice中包含具体的EU和Media Sampler模块作为最基本的可编程处理单元，GPU相关的任务都是在EU上进行。而Media Processing中还集成了一个被称为MFX的独立模块，主要由Media Format Codec（MFX）与VQE组成。 MFX可将一些处理任务通过Fix Function打包，固定于一个执行单元中进行统一的编解码处理，不调用EU从而实现提高EU处理3D图形等任务的速度。Video Quality Engine（VQE）提供De-interlace与De-Noise等视频处理任务，在编解码中使用EU是为了得到更高的视频编码质量。 1.3 结构演进上图展示的是英特尔几代核芯显卡产品在结构上的变化。 最早的Haswell架构也就是v3系列中的EU个数相对较少，最多为40个；而到Broadwell架构的GT3中集成了2个Slice，EU个数随之增加到48个，图像处理性能也随之增强。 从Broadwell架构发展到Skylake架构，除了EU与Slice格式增加的变化，MFX的组织也有相应改进。Broadwell架构是将MFX集成于一个Slice中，一个Slice集成一个MFX；而到Skylake架构之后Slice的个数增加了但MFX的个数并没有，此时的MFC便集成在Slice之外。 随着组织方式的改变，核芯显卡的功能也随之改变：Skylake增加了HEVC的Decoder、PAK增加了基于HEVC的处理功能等改进为核芯显卡整体处理性能带来了显著提升，第六代以后的核芯显卡也都主要沿用GT3的架构组织。 从Driver分发下来的Command Stream回通过多条路径在GPU上得到执行：如果命令属于编解码的Fix Function则会由MFX执行，部分与视频处理相关的命令会由VQE执行，其他的命令则会由EU执行。 而编码过程主要分为两部分：ENC与PAK。ENC主要通过硬件实现Rate Control、Motion Estimation、Intra Prediction、Mode Decision等功能；PAK进行Motion Comp、Intra Prediction、Forward Quant、Pixel Reconstruction、Entropy Coding等功能。在目前的英特尔架构中，Media SDK通过API对硬件进行统一的调度与使用，同时我们提供更底层的接口Flexible Encoder Interface（FEI）以实现更优秀的底层调度与更好的处理效果。 2、软件策略最底层的FFmpeg可允许开发者将QSV集成进FFmpeg中以便于开发，而Media SDK则主要被用于编解码处理，FFmpeg可把整个多媒体处理有效结合。 如果开发者认为传统的Media SDK的处理质量无法达到要求或码率控制不符合某些特定场景，那么可以通过调用FEI等更底层的接口对控制算法进行优化；最顶层的OpenCL接口则利用GPU功能实现边缘计算等处理任务，常见的Hybrid编码方式便使用了OpenCL。除此之外OpenCL也可实现一些其他的并行处理功能，例如与AI相关的一些计算。 2.1 Media SDKMedia SDK分为以下几个版本：Community Edition是一个包含了基本功能的部分免费版本，Essential Edition与Professional Edition则是具有更多功能的收费版本，可实现例如hybrid HEVC 编码，Audio的编解码、Video Quality Caliper Tool等诸多高级功能和分析工具的集合。 软件架构 上图主要介绍的是Media Server Studio Software Stack软件架构，我们基于此架构实现FFmpeg的加速。 这里需注意： OpenGL （mesa）与linux内核一直是开源的项目，但之前版本的MSS中存在一些私有的内核补丁，并对操作系统的或对Linux的内核版本有特殊要求。 HD Graphics Driver for Linux之前是一个闭源的方案，而现在的MSDK 和用户态驱动（iHD驱动）都已经实现开源。现在我们正在制作一个基于开源版本的Release，未来大家可以通过此开源平台获得更好的技术支持。 编解码支持 关于编解码支持，其中我想强调的是HEVC 8 bit 与10 bit的编解码。在Gen 9也就是Skylake上并不支持硬件级别的HEVC 10 bit解码，面对这种情况我们可以通过混合模式实现对HEVC 10 bit的编解码功能。最新E3v6（Kabylake）虽然只有较低性能的GPU配置，但可以支持HEVC 10 bit解码，HEVC 10 bit编码功能则会在以后发布的芯片中提供。 2.2 QSV到FFmpeg的集成思路 FFmpeg集成的思路主要如下： FFmpeg QSV Plugins：将SDK作为FFmpeg的一部分进行封装，其中包括Decoder、Encoder与VPP Filter处理。 VAPPI Plugin：Media对整个英特尔GPU的软件架构而言，从最底层的linux内核，中间有用户态驱动，对外的统一的接口就是VAAPI。Media SDK的硬件加速就是基于VAAPI开发，同时增加了很多相关的功能，其代码更为复杂；而现在增加的VAAPI Plugin则会直接调用LibAV使软硬件结合更为紧密。 将SDK集成到FFmpeg中，一共分为AVDecoder、AVEncoder、AVFilter三个部分： AVFilter AVFilter主要是利用硬件的GPU实现Video Processor功能，其中包括vpp_qsv、overlay_qsv、hwupload_qsv，其中我们重点开发了overlay_qsv，vpp_qsv与hwupload_qsv。 如果在一个视频处理的pipeline中有多个VPP的实例运行，会对性能造成很大的影响。我们的方案是实现一个大的VPP Filter中集成所有功能并通过设置参数实现调用，避免了多个VPP的实例存在。 但是为什么将vpp_qsv与overlay_qsv分开？这是因为无法在一个VPP实例中同时完成compositor和一些视频处理功能（像de-interlace等）。英特尔核芯显卡内显存中的存储格式为NV12， 和非硬件加速的模块联合工作时，需要对Frame Buffer进行从系统内存到显卡显存的复制过程，hwupload_qsv提供了在系统内存和显卡内存之间进行快速帧转换的功能。 AVEncoder AVEncoder目前支持H264、HEVC、MPEG-2等解码的硬件加速。 AVDecoder AVDecoder目前支持H264、HEVC、MPEG-2等协议的硬件加速。 最理想的方案是在整条视频处理的Pipeline中都使用显卡内存从而不存在内存之间的帧拷贝，从而达到最快的处理速度，但在实际应用中我们很多时候是做不到这一点。 将MSDK集成进FFmpeg中时需要解决内存转换的问题，例如VPP Filter不支持一些功能或原始码流并不在Decoder支持的列表中。上图中粉色与绿色的转换表示的就是数据从显存到系统内存再到显存之间的转换。我们在实践中经常会遇到处理性能的急剧变化，可能的原因就是一些非硬件处理的模块和硬件加速的模块存在与同一个pipeline中，从而对整体性能造成影响。这是因为进行了额外的内存拷贝过程，一旦优化不足则会极大影响性能。 具体进行内存分配时我们使用了hwcontext，这是FFmpeg在3.0之后增加的一个功能。我们基于FFmpeg中hwcontext的机制实现了hwcontext_qsv，从而对硬件的初始化与内存分配进行很好的管理。 三、对比MSS与FFmpeg+QSV 二者支持相同的编解码器与视频处理。 二者的差异有： MSS 仅提供了一套库和工具，用户必须基于 MSS进行二次开发；而FFmpeg 是一个流行的多媒体开放框架, QSV的GPU加速只是其中的一部分。 MSS的库中提供 了VPP 接口，用户要实现某些功能必须进行二次开发。而目前,FFmpeg+QSV已存在2个开发好的Filter，并且在Filter中集成了MSS 支持的所有功能，并提供更加简单的选项进行配置，这些功能对用户而言都是方便使用的。 在内存管理上，MSS的开发人员必须管理自己的内存；而FFmpeg 提供基本的内存管理单元并实现系统内存的统一调用，集成了硬件级别的内存处理机制。 FFmpeg 提供了一定的容错机制与 a&#x2F;v 同步机制；FFmpeg+QSV 模块充分利用这些机制来提高兼容性，像使用ffmpeg的parse工具进行视频流预处理。 处理流程上，MSS的用户在使用MSS模块之前必须自己开发Mux&#x2F;Demux或其他必要的模块；而FFmpeg+QSV 由于是基于 MSS 实现并添加了特殊的逻辑, 每个模块都可与 FFmpeg 的其他模块一起工作。 可以说FFmpeg有很强大的媒体支持，相对于传统的MSS在保证性能与质量的前提下为用户节省很多工作量并显著提升开发效率。","categories":[],"tags":[]}],"categories":[],"tags":[]}